from flask import Flask, render_template_string, jsonify, request
from datetime import datetime
import random
import json

app = Flask(__name__)

# -------------------------------------------------------------------
# 1. Ê∏∏ÊàèÊ†∏ÂøÉÈÄªËæë (ÂêéÁ´Ø) - ‰øùÊåÅ‰∏çÂèò
# -------------------------------------------------------------------

symbols = ['üÄÑÔ∏è', 'Áôº', 'A', 'üí∞', '8Ô∏è‚É£8Ô∏è‚É£', 'üê≤', 'üòé']  
payouts = {
    'üÄÑÔ∏è': {3: 0.5, 4: 1, 5: 2}, 'Áôº': {3: 0.5, 4: 1, 5: 3},
    'A': {3: 1, 4: 2, 5: 5}, 'üí∞': {3: 2, 4: 5, 5: 10},
    '8Ô∏è‚É£8Ô∏è‚É£': {3: 5, 4: 10, 5: 20}, 'üê≤': {3: 10, 4: 20, 5: 50}
}
scatter_payouts = {3: 5, 4: 15, 5: 50}

paylines = [
    [5, 6, 7, 8, 9], [0, 1, 2, 3, 4], [10, 11, 12, 13, 14], [0, 6, 12, 8, 4],
    [10, 6, 2, 8, 14], [0, 1, 7, 3, 4], [10, 11, 7, 13, 14], [0, 6, 7, 8, 4],
    [10, 6, 7, 8, 14], [5, 1, 2, 3, 9], [10, 11, 12, 13, 14], [0, 6, 2, 8, 4],
    [10, 6, 12, 8, 14], [5, 6, 7, 8, 9], [0, 1, 7, 13, 14], [10, 11, 7, 3, 4],
    [5, 1, 7, 13, 9], [0, 11, 7, 3, 14], [10, 6, 2, 8, 9], [5, 6, 12, 8, 14]
]
server_state = {
    'balance': 1000.00, 'currency': 'USD', 'multiplier': 1,
    'free_game_spins_left': 0, 'history': [], 'auto_spins': 0
}

def generate_reels():
    grid = []
    weighted_symbols = symbols * 10 + ['üòé'] * 3
    for _ in range(3):
        row = [random.choice(weighted_symbols) for _ in range(5)]
        grid.append(row)
    return grid

def calculate_win(grid, stake):
    total_win, free_games_won, winning_lines_data = 0.0, 0, []
    flat_grid = [symbol for row in grid for symbol in row]
    
    scatter_count = flat_grid.count('üòé')
    if scatter_count >= 3:
        total_win += scatter_payouts.get(scatter_count, 0) * stake
        free_games_won = 10
        scatter_indices = [i for i, s in enumerate(flat_grid) if s == 'üòé']
        winning_lines_data.append({'type': 'scatter', 'indices': scatter_indices})

    for line_indices in paylines:
        symbols_in_line = [flat_grid[i] for i in line_indices]
        first_symbol = next((s for s in symbols_in_line if s != 'üê≤'), 'üê≤')
        count = sum(1 for s in symbols_in_line if s == first_symbol or s == 'üê≤')
        if first_symbol in payouts and count >= 3:
            line_win = payouts[first_symbol].get(count, 0) * stake
            if line_win > 0:
                total_win += line_win
                winning_lines_data.append({'type': 'line', 'indices': line_indices[:count]})

    return total_win, free_games_won, winning_lines_data

# -------------------------------------------------------------------
# 2. Flask Ë∑ØÁî± (API)
# -------------------------------------------------------------------

@app.route('/')
def index():
    return render_template_string(html_template)

@app.route('/spin', methods=['POST'])
def spin():
    global server_state
    try:
        data = request.json
        stake = float(data.get('stake', 0.50))
        multiplier = int(data.get('multiplier', 1))
        if stake <= 0 or stake > 100 or stake % 0.50 != 0 or multiplier not in [1, 5, 10, 20]:
            return jsonify({'error': 'Êó†ÊïàÁöÑ‰∏ãÊ≥®ÊàñÂÄçÁéá (0.50-100, 1x-20x)'}), 400

        effective_stake = stake * multiplier
        is_free_spin = server_state['free_game_spins_left'] > 0
        if not is_free_spin and server_state['balance'] < effective_stake:
            return jsonify({'error': '‰ΩôÈ¢ù‰∏çË∂≥'}), 400
        if not is_free_spin:
            server_state['balance'] -= effective_stake

        reels = generate_reels()
        win, free_games_won, winning_lines = calculate_win(reels, effective_stake)
        server_state['balance'] += win
        if free_games_won > 0:
            server_state['free_game_spins_left'] += free_games_won

        history_entry = {
            'reels': reels, 'stake': effective_stake, 'win': win,
            'time': datetime.now().strftime('%Y-%m-%d %H:%M')
        }
        server_state['history'].insert(0, history_entry)
        if len(server_state['history']) > 5:
            server_state['history'].pop()

        if server_state['auto_spins'] > 0:
            server_state['auto_spins'] -= 1

        return jsonify({
            'reels': reels, 'win': win, 'balance': server_state['balance'],
            'currency': server_state['currency'], 'multiplier': multiplier,
            'free_games_won': free_games_won, 'free_games_left': server_state['free_game_spins_left'],
            'winning_lines': winning_lines, 'is_free_spin': is_free_spin,
            'history': server_state['history'], 'auto_spins_left': server_state['auto_spins']
        })
    except Exception as e:
        print(f"Error during spin: {e}")
        return jsonify({'error': str(e)}), 500

# -------------------------------------------------------------------
# 3. HTML / CSS / JavaScript (ÂâçÁ´Ø) - ‰ºòÂåñ3DËΩ¨ËΩ¥Âä®Áîª
# -------------------------------------------------------------------

html_template = """
<!DOCTYPE html>
<html>
<head>
    <title>ËÇ•Â©ÜÂ®±‰πê - ÈæçÂ∞ëÂæ°Áî®</title>
    <link href="https://fonts.googleapis.com/css2?family=Ma+Shan+Zheng&display=swap" rel="stylesheet">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no">
    <style>
        :root {
            --color-red: #B80000; --color-red-dark: #8A0000;
            --color-gold: #FFD700; --color-gold-dark: #D4A300;
            --color-gold-text: #FFF8DC; --color-bg: #1A1A1A;
            --color-bg-light: #2E2E2E;
        }

        html, body { margin: 0; padding: 0; width: 100%; height: 100%; overflow: hidden; }
        body {
            height: 100dvh; width: 100dvw; background: var(--color-bg);
            background-image: radial-gradient(circle, var(--color-bg-light) 0%, var(--color-bg) 70%);
            color: var(--color-gold); font-family: 'Arial', sans-serif;
            text-align: center; display: flex; flex-direction: column;
        }

        .game-container {
            width: 100%; height: 100dvh; margin: 0; padding: 0;
            box-sizing: border-box; display: flex; flex-direction: column;
            justify-content: space-between; border: 2px solid var(--color-gold);
            box-shadow: 0 0 50px rgba(255, 215, 0, 0.6), inset 0 0 30px rgba(0,0,0,0.5);
        }

        h1#main-title {
            font-family: 'Ma Shan Zheng', cursive; font-size: clamp(30px, 8dvh, 80px);
            color: #fff; margin: 0; padding: 5px 0;
            text-shadow: 0 0 10px #fff, 0 0 20px var(--color-gold), 0 0 30px var(--color-gold),
                         0 0 40px var(--color-red), 0 0 70px var(--color-red);
            animation: flicker-shadow 3s infinite alternate; flex-shrink: 0;
        }
        @keyframes flicker-shadow {
            from { text-shadow: 0 0 10px #fff, 0 0 20px var(--color-gold), 0 0 30px var(--color-gold), 0 0 40px var(--color-red), 0 0 70px var(--color-red); }
            to { text-shadow: 0 0 10px #fff, 0 0 25px var(--color-gold), 0 0 35px var(--color-gold), 0 0 45px var(--color-red), 0 0 80px var(--color-red); }
        }

        .reels-grid {
            display: grid; grid-template-columns: repeat(5, 1fr); gap: 1.5dvw;
            padding: 1.5dvw; background: var(--color-red); border-top: 2px solid var(--color-gold);
            border-bottom: 2px solid var(--color-gold); box-shadow: inset 0 0 20px rgba(0,0,0,0.5);
            flex-grow: 1; overflow: hidden; perspective: 1000px;
        }

        .reel-column {
            display: grid; grid-template-rows: repeat(3, 1fr); gap: 1.5dvw;
            transform-style: preserve-3d; position: relative;
        }

        .symbol-cell {
            width: 100%; height: 100%; position: relative;
            background: linear-gradient(145deg, #2E2E2E, #1A1A1A);
            box-shadow: inset 0 2px 5px rgba(0,0,0,0.5), 0 1px 1px rgba(255,255,255,0.1);
            border-radius: 5px; display: flex; align-items: center; justify-content: center;
            font-size: clamp(20px, 8dvh, 50px); transition: transform 0.2s, box-shadow 0.2s;
            color: #fff; transform-style: preserve-3d; transform: translateZ(0);
        }

        .symbol-cell span {
            position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);
            transition: opacity 0.2s;
        }

        .symbol-cell.spinning {
            background: linear-gradient(145deg, #111, #222);
            animation: spin-3d 1.5s cubic-bezier(0.5, 0, 0.5, 1) infinite;
            box-shadow: inset 0 2px 5px rgba(0,0,0,0.8);
        }
        .symbol-cell.spinning span { opacity: 0.5; }
        @keyframes spin-3d {
            0% { transform: translateZ(0) rotateX(0deg); }
            25% { transform: translateZ(-20px) rotateX(-90deg); }
            50% { transform: translateZ(-40px) rotateX(-180deg); }
            75% { transform: translateZ(-20px) rotateX(-270deg); }
            100% { transform: translateZ(0) rotateX(-360deg); }
        }

        .symbol-cell.landed {
            animation: reel-stop-3d 0.5s ease-out;
        }
        @keyframes reel-stop-3d {
            0% { transform: translateZ(-20px) rotateX(-180deg) scale(0.8); opacity: 0; }
            60% { transform: translateZ(10px) rotateX(0deg) scale(1.1); opacity: 1; }
            80% { transform: translateZ(5px) rotateX(0deg) scale(0.98); }
            100% { transform: translateZ(0) rotateX(0deg) scale(1.0); opacity: 1; }
        }

        .symbol-cell.win-highlight {
            background: var(--color-gold); box-shadow: 0 0 20px var(--color-gold);
            transform: scale(1.1) translateZ(20px); z-index: 10;
            animation: win-pulse-3d 0.6s infinite alternate; position: relative; overflow: hidden;
        }
        .symbol-cell.win-highlight::after {
            content: ''; position: absolute; top: -50%; left: -50%;
            width: 200%; height: 200%; background: linear-gradient(to right, rgba(255,255,255,0) 0%, rgba(255,255,255,0.5) 50%, rgba(255,255,255,0) 100%);
            transform: rotate(25deg); animation: shine 1.5s infinite linear;
        }
        .symbol-cell.win-highlight span { animation: none; }
        @keyframes win-pulse-3d {
            from { transform: scale(1.1) translateZ(20px); }
            to { transform: scale(1.2) translateZ(30px); }
        }
        @keyframes shine { from { transform: translateX(-70%) rotate(25deg); } to { transform: translateX(70%) rotate(25deg); } }

        .controls-panel { display: flex; justify-content: space-around; align-items: center;
            background: rgba(0, 0, 0, 0.6); padding: 1dvh 1.5dvw; flex-shrink: 0;
            border-top: 1px solid var(--color-gold); }

        .info-box { font-size: 2dvh; white-space: nowrap; color: var(--color-gold-text); }
        .info-box span { display: block; font-size: 2.5dvh; font-weight: bold; color: #fff; }

        #currency-select, #multiplier-select, #auto-spins-select {
            background: var(--color-bg-light); color: var(--color-gold);
            border: 1px solid var(--color-gold); border-radius: 5px;
            font-size: 2dvh; padding: 2px;
        }

        .control-button {
            font-weight: bold; padding: 1dvh 2dvw; border-radius: 10px;
            border: none; cursor: pointer; transition: all 0.1s ease-out;
            font-size: 2.5dvh; box-shadow: 0 5px 0 var(--color-gold-dark), 0 8px 15px rgba(0,0,0,0.5);
        }
        
        .spin-button { color: var(--color-gold-text); background: var(--color-red); }
        .spin-button:active { transform: translateY(3px) scale(0.98); box-shadow: 0 2px 0 var(--color-red-dark), 0 4px 5px rgba(0,0,0,0.5); }
        .spin-button.spinning { animation: pulse-red 1s infinite; }
        @keyframes pulse-red { 0% { background: var(--color-red); } 50% { background: var(--color-red-dark); } 100% { background: var(--color-red); } }

        .button-gold { color: var(--color-red); background: var(--color-gold); }
        .button-gold:active { transform: translateY(3px) scale(0.98); box-shadow: 0 2px 0 var(--color-gold-dark), 0 4px 5px rgba(0,0,0,0.5); }

        .auto-spin-button.active { background: var(--color-red); box-shadow: 0 5px 0 var(--color-red-dark), 0 8px 15px rgba(0,0,0,0.5); color: var(--color-gold-text); }
        .control-button:disabled { background: #555; box-shadow: 0 5px 0 #333, 0 8px 15px rgba(0,0,0,0.5); cursor: not-allowed; opacity: 0.6; color: #999; }

        #message-bar { color: #fff; font-size: 2.2dvh; height: 3dvh; margin: 0.5dvh 0; font-weight: bold; flex-shrink: 0; }
        #history-panel { position: fixed; top: 10px; right: 10px; background: rgba(0, 0, 0, 0.7); color: var(--color-gold-text); padding: 10px; border: 1px solid var(--color-gold); border-radius: 5px; max-height: 200px; overflow-y: auto; font-size: 1.5dvh; z-index: 10; }
        #free-game-overlay { position: fixed; top: 0; left: 0; width: 100dvw; height: 100dvh; background: rgba(0, 0, 0, 0.8); z-index: 100; display: none; align-items: center; justify-content: center; flex-direction: column; opacity: 0; transition: opacity 0.5s; }
        #free-game-overlay.show { display: flex; opacity: 1; }
        .free-game-title { font-family: 'Ma Shan Zheng', cursive; font-size: 15dvh; color: var(--color-gold); animation: flicker-shadow 2s infinite alternate; }
        .free-game-subtitle { font-size: 5dvh; color: #fff; }
    </style>
</head>
<body>
    <div class="game-container">
        <h1 id="main-title">ËÇ•Â©ÜÂ®±‰πê üö¨</h1>
        <div class="reels-grid" id="reels-grid"></div>
        <div id="message-bar">ÈæçÂ∞ëÔºåÁÇπÂáªÊåâÈíÆÂºÄÂßãÊ∏∏ÊàèÔºÅ</div>
        <div class="controls-panel">
            <div class="info-box">‰ΩôÈ¢ù <span id="balance-display">$1000.00</span></div>
            <div class="info-box">Â∏ÅÁßç <select id="currency-select"><option value="USD">USD</option><option value="CNY">CNY</option></select></div>
            <div class="info-box">‰∏ãÊ≥® <select id="stake-select"><option value="0.50">0.50</option><option value="1.00">1.00</option><option value="10.00">10.00</option><option value="50.00">50.00</option><option value="100.00">100.00</option></select></div>
            <div class="info-box">ÂÄçÁéá <select id="multiplier-select"><option value="1">1x</option><option value="5">5x</option><option value="10">10x</option><option value="20">20x</option></select></div>
            <div class="info-box">Ëá™Âä® <select id="auto-spins-select"><option value="0">0</option><option value="10">10</option><option value="50">50</option><option value="100">100</option></select></div>
            <button class="control-button auto-spin-button button-gold" id="auto-spin-button">Ëá™Âä®</button>
            <button class="control-button spin-button" id="spin-button">ÊóãËΩ¨</button>
            <button class="control-button button-gold" id="fullscreen-btn">ÂÖ®Â±è</button>
            <div class="info-box">Ëµ¢È¢ù <span id="win-display">$0.00</span></div>
            <div class="info-box">ÂÖçË¥π <span id="free-spins-display">0</span></div>
        </div>
    </div>
    <div id="history-panel">ÂéÜÂè≤ËÆ∞ÂΩï:<br></div>
    <div id="free-game-overlay">
        <div class="free-game-title">ÂÖçË¥πÊ∏∏Êàè!</div>
        <div class="free-game-subtitle" id="free-game-won-text">ÊÅ≠ÂñúÔºÅËé∑Âæó 10 Ê¨°ÂÖçË¥πÊóãËΩ¨ÔºÅ</div>
    </div>
    <audio id="bg-music" loop src="https://www.bensound.com/bensound-music/bensound-groovyhiphop.mp3" preload="auto"></audio>
    <audio id="spin-sound" src="https://www.soundjay.com/mechanical/sounds/spinning-wheel-01.mp3" preload="auto"></audio>
    <audio id="win-sound" src="https://www.soundjay.com/buttons/beep-10.mp3" preload="auto"></audio>
    <audio id="free-game-sound" src="https://www.soundjay.com/buttons/beep-11.mp3" preload="auto"></audio>

    <script>
        const spinButton = document.getElementById('spin-button');
        const autoSpinButton = document.getElementById('auto-spin-button');
        const fullscreenBtn = document.getElementById('fullscreen-btn');
        const reelsGrid = document.getElementById('reels-grid');
        const balanceDisplay = document.getElementById('balance-display');
        const winDisplay = document.getElementById('win-display');
        const freeSpinsDisplay = document.getElementById('free-spins-display');
        const currencySelect = document.getElementById('currency-select');
        const stakeSelect = document.getElementById('stake-select');
        const multiplierSelect = document.getElementById('multiplier-select');
        const autoSpinsSelect = document.getElementById('auto-spins-select');
        const messageBar = document.getElementById('message-bar');
        const historyPanel = document.getElementById('history-panel');
        const freeGameOverlay = document.getElementById('free-game-overlay');
        
        const bgMusic = document.getElementById('bg-music');
        const spinSound = document.getElementById('spin-sound');
        const winSound = document.getElementById('win-sound');
        const freeGameSound = document.getElementById('free-game-sound');

        let isSpinning = false, isAutoSpin = false, wantsToStop = false, spinStopTimer = null;
        let spinIntervals = [], allCells = [], reelAngles = [];
        let clientAutoSpins = 0; // ÂâçÁ´ØÊú¨Âú∞Áª¥Êä§Ëá™Âä®ÊóãËΩ¨Ê¨°Êï∞

        const allSymbols = ['üÄÑÔ∏è', 'Áôº', 'A', 'üí∞', '8Ô∏è‚É£8Ô∏è‚É£', 'üê≤', 'üòé'];

        function doVibrate(duration) {
            if (navigator.vibrate) try { navigator.vibrate(duration); } catch (e) { console.warn("ÈúáÂä®Â§±Ë¥•", e); }
        }

        function toggleFullScreen() {
            doVibrate(30);
            if (!document.fullscreenElement) document.documentElement.requestFullscreen().catch(err => alert(`Êó†Ê≥ïËøõÂÖ•ÂÖ®Â±èÊ®°Âºè: ${err.message}`));
            else if (document.exitFullscreen) document.exitFullscreen();
        }

        function initGame() {
            for (let i = 0; i < 5; i++) {
                const col = document.createElement('div');
                col.className = 'reel-column';
                col.style.transform = `rotateY(${i * 10 - 20}deg) translateZ(50px)`; // Áã¨Á´ãËßíÂ∫¶ÂÅèÁßª
                for (let j = 0; j < 3; j++) {
                    const cell = document.createElement('div');
                    cell.className = 'symbol-cell';
                    cell.innerHTML = `<span>${allSymbols[Math.floor(Math.random() * allSymbols.length)]}</span>`;
                    col.appendChild(cell);
                    allCells.push(cell);
                }
                reelsGrid.appendChild(col);
                reelAngles[i] = 0; // ÂàùÂßãÂåñËßíÂ∫¶
            }
            
            spinButton.addEventListener('click', onSpinButtonClick);
            autoSpinButton.addEventListener('click', onAutoSpinClick);
            fullscreenBtn.addEventListener('click', toggleFullScreen);
            
            document.body.addEventListener('click', () => {
                if (bgMusic.paused) { bgMusic.volume = 0.2; bgMusic.play().catch(e => console.log("Èü≥‰πêÊí≠ÊîæÂ§±Ë¥•:", e)); }
            }, { once: true });
        }

        function onAutoSpinClick() {
            isAutoSpin = !isAutoSpin; doVibrate(30);
            if (isAutoSpin) {
                clientAutoSpins = parseInt(autoSpinsSelect.value) || 0;
                autoSpinButton.textContent = "ÂèñÊ∂à"; autoSpinButton.classList.add('active');
                stakeSelect.disabled = multiplierSelect.disabled = autoSpinsSelect.disabled = true;
                if (!isSpinning && clientAutoSpins > 0) startSpin();
                else if (clientAutoSpins === 0) {
                    // Áî®Êà∑ÈÄâÊã©‰∫Ü 0 Ê¨°Ôºå‰ΩÜÂºÄÂêØ‰∫ÜËá™Âä®ÔºåÁ´ãÂàªÂèñÊ∂à
                    isAutoSpin = false; autoSpinButton.textContent = "Ëá™Âä®"; autoSpinButton.classList.remove('active');
                    stakeSelect.disabled = multiplierSelect.disabled = autoSpinsSelect.disabled = false;
                }
            } else {
                autoSpinButton.textContent = "Ëá™Âä®"; autoSpinButton.classList.remove('active');
                stakeSelect.disabled = multiplierSelect.disabled = autoSpinsSelect.disabled = false;
                clientAutoSpins = 0;
            }
        }

        function onSpinButtonClick() {
            doVibrate(50);
            if (isSpinning) {
                wantsToStop = true;
                spinButton.textContent = "ÂÅúÊ≠¢‰∏≠..";
                spinButton.disabled = true;
                if (spinStopTimer) clearTimeout(spinStopTimer);
            } else {
                isAutoSpin = false;
                clientAutoSpins = 0;
                autoSpinButton.textContent = "Ëá™Âä®";
                autoSpinButton.classList.remove('active');
                stakeSelect.disabled = multiplierSelect.disabled = autoSpinsSelect.disabled = false;
                startSpin();
            }
        }

        async function startSpin() {
            if (isSpinning) return;
            isSpinning = true; wantsToStop = false; clearWinEffects();

            const currentStake = parseFloat(stakeSelect.value), multiplier = parseInt(multiplierSelect.value), currency = currencySelect.value;
            spinButton.textContent = "ÁßíÂÅú"; spinButton.classList.add('spinning'); spinButton.disabled = false;
            autoSpinButton.disabled = stakeSelect.disabled = multiplierSelect.disabled = autoSpinsSelect.disabled = true;
            winDisplay.textContent = "$0.00"; messageBar.textContent = "ËΩ¨Âä®‰∏≠... Á•ùÈæçÂ∞ëÂ•ΩËøêÔºÅ";
            
            spinSound.currentTime = 0; spinSound.play(); startReelAnimation();

            const startTime = Date.now(); let data = null;
            try {
                const response = await fetch('/spin', { method: 'POST', headers: {'Content-Type': 'application/json'}, body: JSON.stringify({stake: currentStake, multiplier: multiplier}) });
                if (!response.ok) { const errorData = await response.json(); throw new Error(errorData.error || 'ÊúçÂä°Âô®ÈîôËØØ'); }
                data = await response.json();
            } catch (error) {
                console.error('Spin Error:', error); messageBar.textContent = `ÈîôËØØ: ${error.message}`;
                stopSpinningState(data?.balance);
                if (error.message === '‰ΩôÈ¢ù‰∏çË∂≥') {
                    isAutoSpin = false; clientAutoSpins = 0;
                }
                return;
            }
            
            const timeElapsed = Date.now() - startTime, minSpinTime = 3000;
            const showResultsFunc = () => showResults(data);
            if (wantsToStop) showResultsFunc();
            else {
                const remainingTime = minSpinTime - timeElapsed;
                if (remainingTime > 0) spinStopTimer = setTimeout(showResultsFunc, remainingTime);
                else showResultsFunc();
            }
        }

        function showResults(data) {
            stopReelAnimation();
            let cellIndex = 0;
            for (let i = 0; i < 5; i++) {
                for (let j = 0; j < 3; j++) {
                    const symbol = data.reels[j][i], cell = allCells[cellIndex];
                    if (!cell.classList.contains('landed')) cell.innerHTML = `<span>${symbol}</span>`;
                    cell.classList.remove('spinning'); cell.classList.add('landed');
                    cellIndex++;
                }
            }
            
            balanceDisplay.textContent = `${data.currency} ${data.balance.toFixed(2)}`;
            freeSpinsDisplay.textContent = data.free_games_left;
            winDisplay.textContent = `${data.currency} ${data.win.toFixed(2)}`;

            if (data.win > 0) {
                messageBar.textContent = `ÊÅ≠ÂñúÈæçÂ∞ëÔºÅËµ¢Âæó ${data.currency} ${data.win.toFixed(2)}ÔºÅ`;
                winSound.currentTime = 0; winSound.play(); showWinEffects(data.winning_lines); doVibrate([100, 30, 100]);
            } else messageBar.textContent = "ÂæàÈÅóÊÜæÔºåÊ≤°‰∏≠Â•ñÔºÅ";
            
            if (data.free_games_won > 0) {
                messageBar.textContent += ` Ëß¶Âèë‰∫Ü ${data.free_games_won} Ê¨°ÂÖçË¥πÊóãËΩ¨!`;
                showFreeGameOverlay(data.free_games_won);
            }
            
            historyPanel.innerHTML = 'ÂéÜÂè≤ËÆ∞ÂΩï:<br>';
            data.history.forEach(entry => {
                historyPanel.innerHTML += `${entry.time}: ÁªìÊûú ${entry.reels.map(row => row.join(' ')).join('<br>')} - ‰∏ãÊ≥® ${entry.stake.toFixed(2)}, Ëµ¢ ${entry.win.toFixed(2)}<br>`;
            });

            stopSpinningState(data.balance);

            // ‰ΩøÁî®ÂâçÁ´Ø clientAutoSpins ÊéßÂà∂Ëá™Âä®ÊóãËΩ¨Âæ™ÁéØ
            if (isAutoSpin && data.balance > 0 && clientAutoSpins > 0) {
                clientAutoSpins--;
                setTimeout(startSpin, 1500);
            } else {
                isAutoSpin = false;
                autoSpinButton.textContent = "Ëá™Âä®";
                autoSpinButton.classList.remove('active');
                stakeSelect.disabled = multiplierSelect.disabled = autoSpinsSelect.disabled = false;
                clientAutoSpins = 0;
            }
        }

        function startReelAnimation() {
            spinIntervals.forEach(clearInterval); spinIntervals = [];
            allCells.forEach(cell => cell.classList.remove('landed', 'win-highlight'));
            let timeOffset = 0;
            for (let i = 0; i < 5; i++) {
                setTimeout(() => allCells.slice(i * 3, (i + 1) * 3).forEach(cell => cell.classList.add('spinning')), timeOffset);
                timeOffset += 150; // Èò∂Ê¢ØÂºèÂêØÂä®
            }
        }

        function stopReelAnimation() {
            spinIntervals.forEach(clearInterval); spinIntervals = [];
            allCells.forEach(cell => cell.classList.remove('spinning'));
            spinSound.pause();
        }

        function stopSpinningState(balance) {
            isSpinning = false; wantsToStop = false;
            spinButton.textContent = "ÊóãËΩ¨"; spinButton.classList.remove('spinning'); spinButton.disabled = false;
            if (!isAutoSpin) autoSpinButton.disabled = stakeSelect.disabled = multiplierSelect.disabled = autoSpinsSelect.disabled = false;
            if (balance !== undefined && balance < parseFloat(stakeSelect.value) * parseInt(multiplierSelect.value)) {
                messageBar.textContent = "‰ΩôÈ¢ù‰∏çË∂≥ÔºåËØ∑Èôç‰Ωé‰∏ãÊ≥®ÊàñÂÄçÁéáÔºÅ"; autoSpinButton.disabled = spinButton.disabled = true;
            }
        }

        // ÂêéÁ´Ø flat Á¥¢Âºï (row-major, index = row*5 + col) -> ÂâçÁ´Ø allCells Á¥¢Âºï (col*3 + row)
        function flatIndexToCellIndex(flatIndex) {
            const row = Math.floor(flatIndex / 5);
            const col = flatIndex % 5;
            return col * 3 + row;
        }

        function showWinEffects(winningLines) {
            if (!winningLines) return;
            let allIndices = new Set();
            winningLines.forEach(line => {
                line.indices.forEach(index => {
                    const mapped = flatIndexToCellIndex(index);
                    allIndices.add(mapped);
                });
            });
            allIndices.forEach(index => allCells[index]?.classList.add('win-highlight'));
        }

        function clearWinEffects() {
            allCells.forEach(cell => cell.classList.remove('win-highlight'));
        }

        function showFreeGameOverlay(count) {
            document.getElementById('free-game-won-text').textContent = `ÊÅ≠ÂñúÔºÅËé∑Âæó ${count} Ê¨°ÂÖçË¥πÊóãËΩ¨ÔºÅ`;
            freeGameOverlay.classList.add('show'); freeGameSound.currentTime = 0; freeGameSound.play();
            doVibrate([200, 50, 200, 50, 100]); setTimeout(() => freeGameOverlay.classList.remove('show'), 3000);
        }

        initGame();
    </script>
</body>
</html>
"""

# -------------------------------------------------------------------
# 4. ËøêË°å Flask Â∫îÁî®
# -------------------------------------------------------------------
if __name__ == '__main__':
    app.run(host='0.0.0.0', port=8080, debug=True)